#include"stdafx.h"
#include<stdio.h>
#include<string.h>

struct Node {
	Node *lchild;
	Node *rchild;
	int c;
}Tree[110];

int loc;
Node *create() {
	Tree[loc].lchild = Tree[loc].rchild = NULL;
	return &Tree[loc++];
}

char str1[25], str2[25];
int size1,size2;
char *str;
int *size;

void preOrder(Node *T) {
	str[(*size)++] = T->c + '0';
	if (T->lchild != NULL)
		preOrder(T->lchild);
	if (T->rchild != NULL)
		preOrder(T->rchild);
}
void inOrder(Node *T) {
	if (T->lchild != NULL)
		inOrder(T->lchild);
	str[(*size)++] = T->c + '0';
	if (T->rchild != NULL)
		inOrder(T->rchild);
}
Node *insert(Node *T, int c) {
	if (T == NULL) {
		T = create();
		T->c = c;
		return T;
	}
	else if (T->c < c) {
		T->rchild = insert(T->rchild, c);
	}
	else if(T->c > c){
		T->lchild = insert(T->lchild, c);
	}
	return T;
}

int main() {
	int n;
	char tmp[12];
	while (scanf("%d", &n)!=EOF) {
		loc = 0; 
		Node *T = NULL;
		scanf("%s", &tmp);
		for (int i = 0; tmp[i] != 0;i++) {
			T = insert(T, tmp[i]-'0');
		}
		size1 = 0;
		str = str1;
		size = &size1;
		preOrder(T);
		inOrder(T);
		str1[size1] = 0;
		while (n--!=0) {
			Node *T = NULL;
			scanf("%s", &tmp);
			for (int i = 0; tmp[i] != 0; i++) {
				T = insert(T, tmp[i] - '0');
			}
			size2 = 0;
			str = str2;
			size = &size2;
			preOrder(T);
			inOrder(T);
			str2[size2] = 0;
			puts(strcmp(str1,str2)==0?"Yes":"No");
		}
	}
	return 0;
}
