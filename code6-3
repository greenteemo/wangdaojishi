#include"stdafx.h"
#include<stdio.h>
#include<queue>
using namespace std;

struct N {
	int a, b, c;
	int t;
};

queue<N>Q;
bool mark[101][101][101];

void AtoB(int sa,int &a,int sb,int &b) {
	if (sb - b >= a) {
		b += a;
		a = 0;
	}
	else {
		a -= sb - b;
		b = sb;
	}
}

int BFS(int s,int n,int m) {
	while (Q.empty()==false) {
		N now = Q.front();
		Q.pop();
		//s往n倒
		int a = now.a;
		int b = now.b;
		int c = now.c;
		AtoB(s,a,n,b);
		if (mark[a][b][c] == false){
			mark[a][b][c] = true;
			N tmp;
			tmp.a = a;
			tmp.b = b;
			tmp.c = c;
			tmp.t = now.t + 1;
			Q.push(tmp);
			if (a == s / 2 && b == s / 2)return tmp.t;
			if (a == s / 2 && c == s / 2)return tmp.t;
			if (b == s / 2 && c == s / 2)return tmp.t;
		}
		//s往m倒
		a = now.a;
		b = now.b;
		c = now.c;
		AtoB(s, a, m, c);
		if (mark[a][b][c] == false) {
			mark[a][b][c] = true;
			N tmp;
			tmp.a = a;
			tmp.b = b;
			tmp.c = c;
			tmp.t = now.t + 1;
			Q.push(tmp);
			if (a == s / 2 && b == s / 2)return tmp.t;
			if (a == s / 2 && c == s / 2)return tmp.t;
			if (b == s / 2 && c == s / 2)return tmp.t;
		}
		//m往s倒
		a = now.a;
		b = now.b;
		c = now.c;
		AtoB(m, c, s, a);
		if (mark[a][b][c] == false) {
			mark[a][b][c] = true;
			N tmp;
			tmp.a = a;
			tmp.b = b;
			tmp.c = c;
			tmp.t = now.t + 1;
			Q.push(tmp);
			if (a == s / 2 && b == s / 2)return tmp.t;
			if (a == s / 2 && c == s / 2)return tmp.t;
			if (b == s / 2 && c == s / 2)return tmp.t;
		}
		//n往s倒
		a = now.a;
		b = now.b;
		c = now.c;
		AtoB(n, b, s, a);
		if (mark[a][b][c] == false) {
			mark[a][b][c] = true;
			N tmp;
			tmp.a = a;
			tmp.b = b;
			tmp.c = c;
			tmp.t = now.t + 1;
			Q.push(tmp);
			if (a == s / 2 && b == s / 2)return tmp.t;
			if (a == s / 2 && c == s / 2)return tmp.t;
			if (b == s / 2 && c == s / 2)return tmp.t;
		}
		//n往m倒
		a = now.a;
		b = now.b;
		c = now.c;
		AtoB(n, b, m, c);
		if (mark[a][b][c] == false) {
			mark[a][b][c] = true;
			N tmp;
			tmp.a = a;
			tmp.b = b;
			tmp.c = c;
			tmp.t = now.t + 1;
			Q.push(tmp);
			if (a == s / 2 && b == s / 2)return tmp.t;
			if (a == s / 2 && c == s / 2)return tmp.t;
			if (b == s / 2 && c == s / 2)return tmp.t;
		}
		//m往n倒
		a = now.a;
		b = now.b;
		c = now.c;
		AtoB(m, c, n, b);
		if (mark[a][b][c] == false) {
			mark[a][b][c] = true;
			N tmp;
			tmp.a = a;
			tmp.b = b;
			tmp.c = c;
			tmp.t = now.t + 1;
			Q.push(tmp);
			if (a == s / 2 && b == s / 2)return tmp.t;
			if (a == s / 2 && c == s / 2)return tmp.t;
			if (b == s / 2 && c == s / 2)return tmp.t;
		}
	}
	return -1;
}

int main() {
	int s, n, m;
	while (scanf("%d%d%d",&s,&n,&m)!=EOF) {
		if (s == 0)break;
		if (s % 2 == 1) { 
			printf("NO\n"); 
			continue;
		}
		for (int i = 0; i <= s;i++) {
			for (int j = 0; j <= n;j++) {
				for (int k = 0; k <= m;k++) {
					mark[i][j][k] = false;
				}
			}
		}
		while (Q.empty() == false)Q.pop();
		N tmp;
		tmp.a = s;
		tmp.b = 0;
		tmp.c = 0;
		tmp.t = 0;
		Q.push(tmp);
		mark[s][0][0] = true;
		int ret = BFS(s,n,m);
		if (ret == -1) printf("NO\n");
		else
			printf("%d\n",ret);
	}
	return 0;
}
